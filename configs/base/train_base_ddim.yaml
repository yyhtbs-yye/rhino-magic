boat:
  path: 'rhino.boats.diffusion.base_diffusion_boat'
  name: 'BaseDiffusionBoat'

  net:
    path: 'diffusers.models.unets'
    name: 'UNet2DModel'
    config:
      in_channels: $in_channels
      out_channels: $out_channels
      sample_size: $sample_size
      down_block_types: ['DownBlock2D', 'DownBlock2D', 'DownBlock2D', 'AttnDownBlock2D']
      up_block_types: ['AttnUpBlock2D', 'UpBlock2D', 'UpBlock2D', 'UpBlock2D']
      block_out_channels: [64, 128, 256, 256]
      layers_per_block: 1
      attention_head_dim: 8
      norm_num_groups: 32
      norm_eps: 0.00001
  
  # Scheduler configuration
  scheduler:
    path: 'rhino.diffusion_helpers.schedulers.scheduling_ddim'
    name: 'DDIMScheduler'
    config:
      beta_start: 0.0001
      beta_end: 0.02
      beta_schedule: "linear"
      steps_offset: 1
      clip_sample: false
      set_alpha_to_one: false
      prediction_type: "epsilon"
      num_train_timesteps: 1000

  solver:
    path: 'rhino.diffusion_helpers.solvers.sampling_ddim'
    name: 'DDIMSampler'         # Name of the model class to use
    config:
      beta_start: 0.0001
      beta_end: 0.02
      beta_schedule: "linear"
      steps_offset: 1
      clip_sample: false
      set_alpha_to_one: false
      prediction_type: "epsilon"
      num_train_timesteps: 1000
      eta: 0.0                   # Parameter controlling noise level in sampling
      num_inference_steps: 50    # Default sampling steps for inference

  loss: 
    net:
      path: 'rhino.loss_wrappers.pixel_loss'
      name: 'PixelLoss'
      params: {}

optimization: 
  net:
    path: 'torch.optim'
    name: 'Adam'
    params:
      lr: 0.0001
      betas: [0.9, 0.999]
      weight_decay: 0.0
    lr_scheduler: {}
    
  use_ema:
    ema_decay: 0.999
    ema_start: $ema_start

trainer: 
  devices: $devices
  max_epochs: 100
  val_check_epochs: 1
  state_save_epochs: 1
  save_images: true

validation: 
  save_images: true
  num_vis_samples: 4
  use_reference: true
  metrics:
    psnr:
      path: 'torchmetrics.image'
      name: 'PeakSignalNoiseRatio'
      params:
        data_range: 2.0
    ssim:
      path: 'torchmetrics.image'
      name: 'StructuralSimilarityIndexMeasure'
      params: {}

# Data configuration
data:
  path: trainer.data_modules.image_data_module
  name: DistTrainSingleValidDataModule
  config: 
    train_dataloader:
      dataset:
        path: 'rhino.datasets.basic_image_dataset'
        name: 'BasicImageDataset'         # Name of the model class to use
        params:
          folder_paths: $train_folder_paths
          data_prefix:
            gt: ''
          pipeline:
            - type: LoadImageFromFile
              keys: [gt]
            - type: Normalize
              keys: [gt]
              mean: [0.5, 0.5, 0.5]
              std: [0.5, 0.5, 0.5]
      batch_size: $batch_size
      num_workers: $num_workers
      pin_memory: false
      persistent_workers: true
      sampler:
        type: DefaultSampler
        shuffle: true

    # Validation dataloader configuration
    valid_dataloader:
      dataset:
        path: 'rhino.datasets.basic_image_dataset'           # Path to import the model class
        name: 'BasicImageDataset'         # Name of the model class to use
        params:
          folder_paths: $valid_folder_paths
          data_prefix:
            gt: ''
          pipeline:
            - type: LoadImageFromFile
              keys: [gt]
            - type: Normalize
              keys: [gt]
              mean: [0.5, 0.5, 0.5]
              std: [0.5, 0.5, 0.5]
      batch_size: $batch_size
      num_workers: $num_workers
      pin_memory: false
      persistent_workers: true
      sampler:
        type: DefaultSampler
        shuffle: true

logging:
  root_dir: work_dirs
  experiment_name: $experiment_name
  log_every_n_steps: 50

callbacks: 
  - path: trainer.callbacks.state_cleaner
    name: KeepTopKStateCallback
    params:
      top_k: 5