boat: 
  path: 'rhino.boats.base_diffusion_boat'
  name: 'BaseDiffusionBoat'            

  net:
    path: 'rhino.nn_wrappers.dit_2d_flexible_wrapper'
    name: 'DiT2DFlexibleWrapper'
    config:
      mode: 'concat'
      sample_size: $sample_size
      sample_channels: $sample_channels
      patch_size: 2
      num_layers: 8
      condition_channels: $condition_channels
      out_channels: $out_channels
      num_embeds_ada_norm: 1
      attention_head_dim: 64
      num_attention_heads: 8
      # norm_type: group
      norm_num_groups: 32
      norm_eps: 0.00001

  context_encoder: {}

  scheduler:
    path: 'rhino.diffusion_helpers.schedulers.scheduling_ddim'
    name: 'DDIMScheduler'
    config:
      beta_start: 0.0001
      beta_end: 0.02
      beta_schedule: "linear"
      steps_offset: 1
      clip_sample: false
      set_alpha_to_one: false
      prediction_type: "epsilon"
      num_train_timesteps: 1000

  solver:
    path: 'rhino.diffusion_helpers.solvers.sampling_ddim'
    name: 'DDIMSampler'
    config:
      beta_start: 0.0001
      beta_end: 0.02
      beta_schedule: "linear"
      steps_offset: 1
      clip_sample: false
      set_alpha_to_one: false
      prediction_type: "epsilon"
      num_train_timesteps: 1000
      eta: 0.0
      num_inference_steps: 50
  loss:
    net:
      path: 'rhino.loss_wrappers.pixel_loss'
      name: 'PixelLoss'
      params: {}

optimization: 
  net:
    path: 'torch.optim'
    name: 'Adam'
    params:
      lr: 0.0001
      betas: [0.9, 0.999]
      weight_decay: 0.0
    lr_scheduler: {}
  use_ema:
    ema_decay: 0.999
    ema_start: $ema_start

trainer: 
  device: $device
  max_epochs: 100
  val_check_epochs: 1
  state_save_epochs: 1
  save_images: true

validation: 
  save_images: true
  num_vis_samples: 4
  use_reference: true
  metrics:
    psnr:
      path: 'torchmetrics.image'
      name: 'PeakSignalNoiseRatio'
      params:
        data_range: 2.0
    ssim:
      path: 'torchmetrics.image'
      name: 'StructuralSimilarityIndexMeasure'
      params: {}
  target_metric_name: 'psnr'

data: 
  path: trainer.data_modules.image_data_module
  name: SimpleTrainValidDataModule
  config: 
    train_dataloader: 
      dataset:
        path: 'trainer.torch_datasets.basic_image_dataset'
        name: 'BasicImageDataset'
        params: 
          folder_paths: $train_folder_paths
          data_prefix:
            gt: ''
            cond: ''
          pipeline:
            - type: LoadImageFromFile
              keys: [gt, cond]
            - type: Normalize
              keys: [gt, cond]
              mean: [0.5, 0.5, 0.5]
              std: [0.5, 0.5, 0.5]
      batch_size: $train_batch_size
      num_workers: $train_batch_size
      pin_memory: false
      persistent_workers: false
      sampler:
        type: DefaultSampler
        shuffle: true
    
    valid_dataloader: 
      dataset: 
        path: 'trainer.torch_datasets.basic_image_dataset'
        name: 'BasicImageDataset'
        params: 
          folder_paths: $valid_folder_paths
          data_prefix:
            gt: ''
            cond: ''
          pipeline:
            - type: LoadImageFromFile
              keys: [gt, cond]
            - type: Normalize
              keys: [gt, cond]
              mean: [0.5, 0.5, 0.5]
              std: [0.5, 0.5, 0.5]
      batch_size: $valid_batch_size
      num_workers: $valid_batch_size
      persistent_workers: true
      sampler:
        type: DefaultSampler
        shuffle: true

logging: 
  root_dir: work_dirs
  experiment_name: $experiment_name
  log_every_n_steps: 50

callbacks: 
  - path: trainer.callbacks.state_cleaner
    name: KeepTopKStateCallback
    params:
      top_k: 5