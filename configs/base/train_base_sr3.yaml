boat: 
  path: 'rhino.diffusers.boats.conditioned.pixel_diffusing'
  name: 'ConditionedPixelDiffusionBoat'

  model:
    path: 'rhino.diffusers.networks.unet_2d_flexible_condition'
    name: 'UNet2DFlexibleConditionModel'
    config:
      mode: 'concat'
      sample_channels: $sample_channels
      condition_channels: $condition_channels
      sample_size: $sample_size
      out_channels: $out_channels
      down_block_types: ['DownBlock2D', 'DownBlock2D', 'DownBlock2D', 'AttnDownBlock2D']
      up_block_types: ['AttnUpBlock2D', 'UpBlock2D', 'UpBlock2D', 'UpBlock2D']
      block_out_channels: [128, 256, 512, 512]
      layers_per_block: 2
      attention_head_dim: 8
      norm_num_groups: 32
      norm_eps: 0.00001

  context_encoder: {}

  scheduler:
    path: 'rhino.diffusers.schedulers.scheduling_ddim'
    name: 'DDIMScheduler'
    config:
      beta_start: 0.0001
      beta_end: 0.02
      beta_schedule: "linear"
      steps_offset: 1
      clip_sample: false
      set_alpha_to_one: false
      prediction_type: "epsilon"
      num_train_timesteps: 1000

  solver:
    path: 'rhino.diffusers.solvers.sampling_conditioned_ddim'
    name: 'DDIMConditionedSampler'
    config:
      beta_start: 0.0001
      beta_end: 0.02
      beta_schedule: "linear"
      steps_offset: 1
      clip_sample: false
      set_alpha_to_one: false
      prediction_type: "epsilon"
      num_train_timesteps: 1000
      eta: 0.0
      num_inference_steps: 50
  loss:
    model:
      path: 'trainer.losses.weighted_losses'
      name: 'WeightedMSELoss'
      params: {}

optimization: 
  model:
    path: 'torch.optim'
    name: 'Adam'
    params:
      lr: 0.0001
      betas: [0.9, 0.999]
      weight_decay: 0.0
    lr_scheduler: {}
  use_ema:
    ema_decay: 0.999
    ema_start: $ema_start

trainer: 
  device: $device
  max_epochs: 100
  val_check_epochs: 1
  state_save_epochs: 1
  save_images: true

validation: 
  save_images: true
  num_vis_samples: 4
  use_reference: true
  metrics:
    psnr:
      path: 'torchmetrics.image'
      name: 'PeakSignalNoiseRatio'
      params:
        data_range: 2.0
    ssim:
      path: 'torchmetrics.image'
      name: 'StructuralSimilarityIndexMeasure'
      params: {}

data: 
  path: trainer.data_modules.image_data_module
  name: SimpleTrainValidDataModule
  config: 
    train_dataloader: 
      dataset:
        path: 'trainer.torch_datasets.basic_image_dataset'
        name: 'BasicImageDataset'
        params: 
          folder_paths: $train_folder_paths
          data_prefix:
            gt: ''
            ctx: ''
          pipeline:
            - type: LoadImageFromFile
              keys: [gt, ctx]
            - type: Normalize
              keys: [gt, ctx]
              mean: [0.5, 0.5, 0.5]
              std: [0.5, 0.5, 0.5]
      batch_size: 8
      num_workers: 8
      pin_memory: false
      persistent_workers: true
      sampler:
        type: DefaultSampler
        shuffle: true
    
    valid_dataloader: 
      dataset: 
        path: 'trainer.torch_datasets.basic_image_dataset'
        name: 'BasicImageDataset'
        params: 
          folder_paths: $valid_folder_paths
          data_prefix:
            gt: ''
            ctx: ''
          pipeline:
            - type: LoadImageFromFile
              keys: [gt, ctx]
            - type: Normalize
              keys: [gt, ctx]
              mean: [0.5, 0.5, 0.5]
              std: [0.5, 0.5, 0.5]
      batch_size: 16
      num_workers: 8
      persistent_workers: true
      sampler:
        type: DefaultSampler
        shuffle: true

logging: 
  root_dir: work_dirs
  experiment_name: $experiment_name
  log_every_n_steps: 50

callbacks: 
  - path: trainer.callbacks.state_cleaner
    name: KeepTopKStateCallback
    params:
      top_k: 5