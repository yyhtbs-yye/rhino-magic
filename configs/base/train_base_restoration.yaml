boat: 
  path: 'rhino.boats.restoration.base_restoration_boat'
  name: 'BaseRestorationBoat'            

  models:
    net: $net
    losses: $loss

optimization: 
  net:
    path: 'torch.optim'
    name: 'Adam'
    params:
      lr: 0.0001
      betas: [0.9, 0.999]
      weight_decay: 0.0
    lr_scheduler: {}
  use_ema:
    ema_decay: 0.999
    ema_start: $ema_start

trainer: 
  devices: $devices
  max_epochs: $max_epochs
  val_check_epochs: 1
  state_save_epochs: 1
  save_images: true

validation: 
  save_images: true
  num_vis_samples: 4
  use_reference: true
  metrics:
    psnr:
      path: 'torchmetrics.image'
      name: 'PeakSignalNoiseRatio'
      params:
        data_range: 2.0
    ssim:
      path: 'torchmetrics.image'
      name: 'StructuralSimilarityIndexMeasure'
      params: {}
  target_metric_name: 'psnr'

data: 
  path: trainer.data_modules.image_data_module
  name: DistTrainDistValidDataModule
  config: 
    train_dataloader: 
      dataset:
        path: 'trainer.torch_datasets.basic_image_dataset'
        name: 'BasicImageDataset'
        params: 
          folder_paths: $train_folder_paths
          data_prefix:
            gt: ''
            lq: ''
          pipeline:
            - type: LoadImageFromFile
              keys: [gt, lq]
            - type: Normalize
              keys: [gt, lq]
              mean: [0.5, 0.5, 0.5]
              std: [0.5, 0.5, 0.5]
      batch_size: $train_batch_size
      num_workers: $num_workers
      pin_memory: false
      persistent_workers: false
      sampler:
        type: DefaultSampler
        shuffle: true
    
    valid_dataloader: 
      dataset: 
        path: 'trainer.torch_datasets.basic_image_dataset'
        name: 'BasicImageDataset'
        params: 
          folder_paths: $valid_folder_paths
          data_prefix:
            gt: ''
            lq: ''
          pipeline:
            - type: LoadImageFromFile
              keys: [gt, lq]
            - type: Normalize
              keys: [gt, lq]
              mean: [0.5, 0.5, 0.5]
              std: [0.5, 0.5, 0.5]
      batch_size: $valid_batch_size
      num_workers: $num_workers
      persistent_workers: true
      sampler:
        type: DefaultSampler
        shuffle: true

logging:
  root_dir: 'work_dirs'
  name: $experiment_name
  loggers:
    tensorboard:
      path: 'trainer.loggers.tensorboard'
      name: 'TensorBoardLogger'
      params:
        log_dir: 'work_dirs'
        name: $experiment_name

callbacks: 
  - path: trainer.callbacks.state_cleaner
    name: KeepTopKStateCallback
    params:
      top_k: 5